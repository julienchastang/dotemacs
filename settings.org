#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLE: Julien's emacs settings file
#+DATE: <2016-12-16 Fri>
#+AUTHOR: Julien Chastang
#+EMAIL: julien.c.chastang@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.2 (Org mode 8.3.6)

* Literate Emacs Initialization File

#+BEGIN_EXAMPLE
     ____.     .__  .__            /\
    |    |__ __|  | |__| ____   ___)/  ______      ____   _____ _____    ____   ______
    |    |  |  \  | |  |/ __ \ /    \ /  ___/    _/ __ \ /     \\__  \ _/ ___\ /  ___/
/\__|    |  |  /  |_|  \  ___/|   |  \\___ \     \  ___/|  Y Y  \/ __ \\  \___ \___ \
\________|____/|____/__|\___  >___|  /____  >  /\ \___  >__|_|  (____  /\___  >____  >
                            \/     \/     \/   \/     \/      \/     \/     \/     \/
#+END_EXAMPLE

Emacs initialization as org file. It is a constant work in progress.

** Disclaimer

#+BEGIN_SRC emacs-lisp :exports none
  ;; WARNING! This file is automatically generated from settings.org!
  ;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in your =~/.emacs.d/init.el= file.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; optionally remove default org install
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2013-09/msg00178.html

  (setq load-path
        (delq nil
              (mapcar
               (function (lambda (p)
                           (unless (string-match "lisp\\(/packages\\)?/org$" p)
                             p)))
               load-path)))

  (mapatoms (function
             (lambda (s)
               (let ((sn (symbol-name s)))
                 (when (string-match "^\\(org\\|ob\\|ox\\)\\(-.*\\)?$" sn)
                   (setplist s nil)
                   (when (eq 'autoload (car-safe s))
                     (unintern s)))))))

  ;; git clone https://code.orgmode.org/bzg/org-mode.git
  ;; if curating org-mode, remember to 'make autoloads'

  (add-to-list 'load-path (expand-file-name "~/.emacs.d/git/org-mode/lisp"))

  (add-to-list 'load-path
               (expand-file-name "~/.emacs.d/git/org-mode/contrib/lisp"))

  ;; now tangle in settings.org

  (package-initialize)
  (require 'cl)
  (require 'ob-tangle)
  (org-babel-load-file "~/.emacs.d/git/dotemacs/settings.org")
#+END_SRC

** X11 Key bindings

To have the meta and super key working in X11 emacs insert the following into the =~/.xmodmap=.

#+BEGIN_SRC sh :tangle no
  clear Mod1
  clear Mod4
  clear Mod2
  keycode 66 = Alt_L
  keycode 63 = Super_L
  add Mod2 = Alt_L
  add Mod4 = Super_L
#+END_SRC

This configuration requires that "Option keys send Alt_L and Alt_R" checkbox is set in Preferences. Also disable "Enable key equivalents under X11".

[[https://gist.github.com/dreeve/845301][Thanks dreeve]]

** General Settings

Everything in this section are general settings that should not need any
non-default packages.

Keep customize settings in their own file

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/git/dotemacs/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

Let's change to a less horrible color theme. The available default options are =adwaita deeper-blue dichromacy leuven light-blue manoj-dark misterioso tango tango-dark tsdh-dark tsdh-light wheatgrass whiteboard wombat=

#+BEGIN_SRC emacs-lisp
  (condition-case nil
      (load-theme 'leuven)
    ('error (message (format "Could not load leuven theme"))))

#+END_SRC

Fonts

#+BEGIN_SRC emacs-lisp
  (defun jc/setup-osx-fonts ()
    (if (fboundp 'set-fontset-set)
        (set-fontset-font "fontset-default" 'symbol "Monaco"))
    (set-face-attribute 'default nil :height 120)
    (set-face-attribute 'fixed-pitch nil :height 120)
    ;; Anti-aliasing
    (setq mac-allow-anti-aliasing t))

  (defun jc/setup-x11-fonts ()
    (set-frame-font "DejaVu Sans Mono")
    (set-face-attribute 'default nil :height 105))

  (cond
   ((eq system-type 'darwin)
    (add-hook 'after-init-hook #'jc/setup-osx-fonts))
   ((eq window-system 'x)
    (add-hook 'after-init-hook #'jc/setup-x11-fonts))
   ;; default, do nothing
   (t nil))
#+END_SRC

Deal with additional paths

#+begin_src emacs-lisp
  (defvar my-paths '("/usr/local/bin" "/Library/TeX/texbin"))

  (dolist (pth my-paths)
    (when (file-directory-p pth)
      (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name pth)))
      (setq exec-path (split-string (getenv "PATH") path-separator))))
#+end_src


Increase auto-save rate.

#+begin_src emacs-lisp
  (setq auto-save-interval 20) ; twenty keystrokes
  (setq auto-save-timeout 10) ; ten idle seconds
#+end_src

Don't need a startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

UTF-8

#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Turn on syntax highlighting for all buffers

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

Turn off irrelevant stuff.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode  -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode  -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode 'nil))
  (when (require 'mwheel nil 'noerror)
    (mouse-wheel-mode t))
  (tooltip-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

Set up the fill-column to 80 characters and set tab width to 2.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (setq-default default-tab-width 2)
  ;; never use tab characters for indentation
  (setq-default indent-tabs-mode nil)
#+END_SRC

Keyboard macro to join lines. Call it with prefix to join multiple.

#+BEGIN_SRC emacs-lisp
  (fset 'jc/join-lines
        (lambda (&optional arg) "Keyboard macro." (interactive "p")
          (kmacro-exec-ring-item (quote ([14 1 backspace 32 2] 0 "%d")) arg)))

  (global-set-key (kbd "C-c j") 'jc/join-lines)
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
  (setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
  (setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
  (whitespace-mode t)
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

rename file and buffer
 http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun jc/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

Upcase & Down Case

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

Text scale bigger or smaller

#+BEGIN_SRC emacs-lisp
;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

EWW

#+BEGIN_SRC emacs-lisp
  (setq eww-search-prefix "https://www.google.com/search?q=")
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** Org mode Settings

At this point we still have not done anything special outside of what is
possible in a default emacs programming environment. This will continue for this
section.

Let's get the agenda going.

*** General org settings

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

*** Subtree navigation
# http://emacs.stackexchange.com/questions/22405/after-executing-org-narrow-to-subtree-how-do-i-move-between-subtrees-of-the-sam

#+BEGIN_SRC emacs-lisp
  (defun jc/org-narrow-backward ()
    "Move back subtree at same level, and narrow to it."
    (interactive)
    (widen)
    (org-backward-heading-same-level 1)
    (org-narrow-to-subtree))

  (defun jc/org-narrow-forward ()
    "Move to the next subtree at same level, and narrow to it."
    (interactive)
    (widen)
    (org-forward-heading-same-level 1)
    (org-narrow-to-subtree))

  (org-defkey org-mode-map [f7] 'jc/org-narrow-backward)
  (org-defkey org-mode-map [f9] 'jc/org-narrow-forward)
#+END_SRC

*** Clocking commands

#+BEGIN_SRC emacs-lisp
  (defun jc/org-query-clock-out ()
      "Ask the user before clocking out.
        This is a useful function for adding to `kill-emacs-query-functions'."
      (if (and (featurep 'org-clock)
               (funcall 'org-clocking-p)
               (y-or-n-p "You are currently clocking time, clock out? "))
          (org-clock-out)
        t)) ; only fails on keyboard quit or error

  (add-hook 'kill-emacs-query-functions 'jc/org-query-clock-out)
#+END_SRC

*** Ditaa

Ditaa is a command-line utility that converts diagrams drawn using ASCII art
into bitmap graphics. Here is the Ditaa path:

#+BEGIN_SRC emacs-lisp
  (cond
   ((string-equal system-type "darwin")   ; Mac OS X
    (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar"))
   ((string-equal system-type "gnu/linux") ; linux
    (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")))
#+END_SRC

*** Inline image support

#+BEGIN_SRC emacs-lisp
  (defun jc/do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))

  (global-set-key (kbd "C-c C-x C v")
                  'do-org-show-all-inline-images)

  (defun jc/fix-inline-images ()
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook 'jc/fix-inline-images)
#+END_SRC

*** bibtex
[[http://tex.stackexchange.com/questions/32348/problems-with-bbl-in-org-mode#comment594526_39885][bibtex]]

#+BEGIN_SRC emacs-lisp
  (require 'ox-bibtex)
  (setq org-latex-to-pdf-process (list "latexmk -pdf -bibtex %f"))
#+END_SRC

*** org-grep


#+BEGIN_SRC emacs-lisp
  (defun jc/rgrep-org (regexp dir)
    "rgrep for org files only"
    (interactive
     (progn
       (grep-compute-defaults)
       (let* ((regexp (grep-read-regexp))
              (dir (read-directory-name "Base directory: "
                                        nil default-directory t)))
         (list regexp dir))))
    (rgrep regexp "*.org" dir nil))
#+END_SRC


** Manually Curated Packages

These modes are not in any package manager so curate them manually.

#+tblname: private-packages
|-----------------------------------------+-----------------------------------------------------+-----------------------+-------------|
| package                                 | Location                                            | description           | anchors     |
|-----------------------------------------+-----------------------------------------------------+-----------------------+-------------|
| ~/.emacs.d/git/emacs-rotate/            | https://github.com/daichirata/emacs-rotate          | Buffer rotate         | [[rotate][rotate]]      |
| ~/.emacs.d/git/title-capitalization.el/ | https://github.com/novoid/title-capitalization.el   | Title capitalization  | [[writing][writing]]     |
| ~/.emacs.d/git/org-present/             | https://github.com/rlister/org-present              | org presentation mode | [[org-present]] |
| ~/.emacs.d/wget/infoplus/               | https://www.emacswiki.org/emacs/download/info%2b.el | Extensions to info.el | [[info][info]]        |
|-----------------------------------------+-----------------------------------------------------+-----------------------+-------------|


#+BEGIN_SRC emacs-lisp :var packs=private-packages :hlines no
  (defvar p-packages (mapcar 'car (cdr packs)))

  (dolist (pack p-packages)
    (when (file-directory-p  pack)
      (add-to-list 'load-path pack)))
#+END_SRC

** Package Archives
We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  ;; initalize all ELPA packages
  (require 'package)

  ;; define some package archives
  (add-to-list 'package-archives
     '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives
    '("marmalade" . "https://marmalade-repo.org/packages/"))
  (package-initialize)
  (package-refresh-contents)

  ;; Message how long it took to load everything (minus packages)
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages We Will Use

Define all the packages we are going to use. Note if you are viewing this table
on github, the anchors will not take you anywhere. The anchors only work in
emacs org mode.

#+tblname: my-packages
|-------------------------------+-----------------------------------------------+------------|
| package                       | description                                   | anchors    |
|-------------------------------+-----------------------------------------------+------------|
| helm                          | helm completion engine                        | [[helm][helm]]       |
| helm-org-rifle                | Rifle through your Org files                  | [[helm][helm]]       |
| projectile                    | Project navigation and management library     | [[projectile][projectile]] |
| helm-projectile               | Projectile helm integration                   | [[projectile][projectile]] |
| ace-jump-mode                 | ace-jump-mode                                 | [[ace][ace]]        |
| rw-hunspell                   | spelling                                      | [[spelling][spelling]]   |
| rw-ispell                     | spelling                                      | [[spelling][spelling]]   |
| rw-language-and-country-codes | spelling                                      | [[spelling][spelling]]   |
| flycheck                      | on-the-fly syntax checking                    |            |
| yasnippet                     | Yet another snippet extension for Emacs       | [[yasnippet][yasnippet]]  |
| magit                         | emacs git client                              | [[git][git]]        |
| git-gutter                    | git gutter                                    | [[git][git]]        |
| git-timemachine               | Walk through git revisions of a file          | [[git][git]]        |
| git-link                      | Get git forge  URL for a buffer location      | [[git][git]]        |
| fill-column-indicator         | 80 column rule                                | [[fci][fci]]        |
| spaceline                     | A better mode line                            | [[modeline][modeline]]   |
| paredit                       | structured editing of S-expression data       | [[paren][paren]]      |
| rainbow-delimiters            | rainbow parentheses                           | [[paren][paren]]      |
| markdown-mode                 | markdown for emacs                            | [[markdown][markdown]]   |
| yaml-mode                     | yaml for emacs                                | [[yaml][yaml]]       |
| undo-tree                     | undo tree                                     | [[undo][undo]]       |
| windresize                    | arrow keys resize the window                  |            |
| company                       | Modular text completion framework             |            |
| javap-mode                    | Load .class file and get javap output         |            |
| python                        | Python mode for emacs                         | [[python][python]]     |
| dockerfile-mode               | Major mode for editing Docker's Dockerfiles   |            |
| csv-mode                      | Major mode for editing comma separated values |            |
| zoom-window                   | Zoom window like tmux                         |            |
| gnuplot                       | gnuplot                                       | [[gnuplot][gnuplot]]    |
| ob-http                       | http request in org-mode babel                | [[http][http]]       |
| direx                         | Simple tree directory explorer                | [[dired][dired]]      |
| nginx-mode                    | Mode for editing Nginx config files           | [[nginx][nginx]]      |
| hackernews                    | Hacker News                                   | [[hn][hn]]         |
| helm-tramp                    | Tramp helm interface for ssh, docker, vagrant | [[tramp][tramp]]      |
| docker-tramp                  | Tramp for docker containers                   | [[tramp][tramp]]      |
| ox-hugo                       | Hugo markdown back-end for org export engine  | [[hugo][hugo]]       |
| org-bullets                   | Show bullets in org-mode                      | [[bullets]]    |
|-------------------------------+-----------------------------------------------+------------|

#+tblname: my-packages-unstable
|------------------+-----------------------------------------+--------------|
| package          | description                             | anchors      |
|------------------+-----------------------------------------+--------------|
| restclient       | An interactive HTTP client for Emacs    | [[restclient][restclient]]   |
| ob-restclient    | org-babel functions for restclient-mode | [[restclient][restclient]]   |
| ox-gfm           | Github Flavored Markdown                | [[markdown][markdown]]     |
| synonymous       | Thesaurus                               | [[writing][writing]]      |
| multiple-cursors | Multiple cursors for Emacs              | [[multi-cursor][multi-cursor]] |
| github-issues    | GitHub project issues                   | [[git][git]]          |
| elfeed           | Emacs feed reader                       | [[elfeed][elfeed]]       |
| elfeed-org       | Emacs feed reader for org-mode          | [[elfeed][elfeed]]       |
|------------------+-----------------------------------------+--------------|

Convenience function

#+BEGIN_SRC emacs-lisp
  (defun jc/install-packages (pack-list)
    (dolist (pack pack-list)
      (unless (package-installed-p pack)
        (condition-case err
            (package-install pack)
          (error (princ (format "Could not install package: %s" pack)))))))
#+END_SRC

Download the packages we need.

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
  (defvar my-package-list (mapcar 'intern (mapcar 'car (cdr packs))))

  (jc/install-packages my-package-list)
#+END_SRC

Now handle unstable packages.

#+BEGIN_SRC emacs-lisp :var packs=my-packages-unstable :hlines no
  (defvar my-package-list-unstable (mapcar 'intern (mapcar 'car (cdr packs))))

  (add-to-list 'package-archives
     '("melpa-unstable" . "https://melpa.org/packages/"))
  (package-refresh-contents)

  (jc/install-packages my-package-list-unstable)
#+END_SRC

** Package Configuration
*** IBuffer

ibuffer

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
        '(("home"
           ("readme.org" (filename . "readme.org"))
           ("Org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("emacs" (or (name . "^\\*scratch\\*$")
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*Help\\*$")
                        (name . "^\\*Packages\\*$")
                        (name . "^\\*Backtrace\\*$")))
           ("elisp" (mode . emacs-lisp-mode))
           ("sh" (mode . shell-script-mode))
           ("yaml" (mode . yaml-mode))
           ("dired" (mode . dired-mode))
           ("Magit" (name . "^magit")))))

  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-switch-to-saved-filter-groups "home")))
#+END_SRC

*** Helm
<<helm>>

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (require 'helm)
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  ;; (global-set-key (kbd "C-x C-b") 'helm-buffers-list)

  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-limit 75)
#+END_SRC

helm-org-rifle

#+BEGIN_SRC emacs-lisp
  (require 'helm-org-rifle)
#+END_SRC
*** Projectile
<<projectile>>

#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1)
#+END_SRC

Clean up white space. [[https://emacs.stackexchange.com/a/27794/8424][Thanks Jack]].

#+BEGIN_SRC emacs-lisp
  (defun jc/projectile-delete-trailing-white-spaces-from-project-files ()
    "Deletes trailing spaces from all projectile project files."
    (interactive)
    (let ((project-files (projectile-current-project-files)))
      (dolist (pr project-files)
        (when (file-exists-p pr)
          (message "clearing trailing whitespace in %s" pr)
          (with-temp-buffer
            (insert-file-contents pr)
            (delete-trailing-whitespace (point-min) (point-max))
            (write-file pr))))))
#+END_SRC

*** Ace Jump Mode
<<ace>>

#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "\C-c SPC") 'ace-jump-mode)))
#+END_SRC

*** Spelling
<<spelling>>

Using hunspell and friends. If on OS X make sure you have dictionaries in
=/Library/Spelling= and/or =~/Library/Spelling= or else you'll get a mysterious
error. For English language dictionaries, it should be something like
=default.aff default.dic en_US.aff n_US.dic=. The =default= files are
soft-linked to the main dictionary of your choice (in this case =en_US=). Also
make sure to =brew install hunspell=.

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "/usr/local/bin/hunspell")
      (progn
        ;; Add english-hunspell as a dictionary
        (setq-default ispell-program-name "hunspell"))
    (progn (setq-default ispell-program-name "aspell")
           (setq ispell-extra-args '("--sug-mode=normal" "--ignore=3"))))

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN" . "#\\+END"))
#+END_SRC

*** YASnippet
<<yasnippet>>

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/git/yasnippet-snippets/")
  (yas-global-mode +1)

  ;; https://www.emacswiki.org/emacs/Yasnippet#toc4
  (defun jc/yas-helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))

  (add-to-list 'yas-prompt-functions 'jc/yas-helm-prompt)
#+END_SRC

*** git
<<git>>

git gutter

#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode t)
#+END_SRC

Magit stuff

#+BEGIN_SRC emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

GitHub Issues

#+BEGIN_SRC emacs-lisp
  (require 'github-issues)
#+END_SRC

git link

#+BEGIN_SRC emacs-lisp
  (require 'git-link)
#+END_SRC

*** Fill Column Indicator
<<fci>>

Turn off fci mode for now.

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'org-mode-hook 'fci-mode)
#+END_SRC

https://github.com/alpaker/Fill-Column-Indicator/issues/45

#+BEGIN_SRC emacs-lisp
  (defun fci-mode-override-advice (&rest args))

  (advice-add 'org-html-fontify-code :around
              (lambda (fun &rest args)
                (advice-add 'fci-mode :override #'fci-mode-override-advice)
                (let ((result  (apply fun args)))
                  (advice-remove 'fci-mode #'fci-mode-override-advice)
                  result)))
#+END_SRC

*** Mode line
<<modeline>>

Spaceline.

#+BEGIN_SRC emacs-lisp
  (require 'spaceline-config)
  (spaceline-emacs-theme)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-modified)
#+END_SRC

*** Parentheses
<<paren>>

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
#+END_SRC

*** Undo
<<undo>>

#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

*** Markdown
<<markdown>>

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)

  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

git flavored markdown

#+BEGIN_SRC emacs-lisp
  (require 'ox-gfm)
#+END_SRC

*** YAML
<<yaml>>

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
      (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

  (add-hook 'yaml-mode-hook
        '(lambda ()
          (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

*** Jython/Python
<<python>>

This base ~settings.org~ emacs initialization file has somewhat limited support for Python. The 'python' branch of this repository has much better support coupled with [[https://github.com/julienchastang/Julien-Dockerfiles/tree/master/python-emacs][this emacs docker machine]]. Using Jython for babel (which yields somewhat mixed results).

jython/python mode

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "jython")
#+END_SRC

Fill column indicator

#+BEGIN_SRC emacs-lisp
  ;; fill column indicator for python files
  (add-hook 'python-mode-hook 'fci-mode)
#+END_SRC

*** org-present
<<org-present>>

org-present

#+BEGIN_SRC emacs-lisp
  (require 'org-present)
#+END_SRC

*** Rotate
<<rotate>>

Buffer Rotation

#+BEGIN_SRC emacs-lisp
  (require 'rotate)
  (global-set-key (kbd "C-x C-o") 'rotate-window)
#+END_SRC

*** Babel
<<babel>>
Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (emacs-lisp . t)
     (org . t)
     (gnuplot . t)
     (latex . t)
     (shell . t)
     (http . t)
     (restclient . t)
     (python . t)))
#+END_SRC

*** XML
<<xml>>

#+BEGIN_SRC emacs-lisp
  (require 'hideshow)
  (require 'sgml-mode)
  (require 'nxml-mode)

  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"

                 "<!--"
                 sgml-skip-tag-forward
                 nil))



  (add-hook 'nxml-mode-hook 'hs-minor-mode)

  ;; optional key bindings, easier than hs defaults
  (define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding)
#+END_SRC

*** emacs-lisp

eldoc for emacs lisp development

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

*** restclient
<<restclient>>

#+BEGIN_SRC emacs-lisp
  (require 'restclient)
#+END_SRC

*** dired-x
<<dired>>

[[info:dired-x#Installation][Info on dired-x]]

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")
              ;; Set dired-x global variables here.  For example:
              ;; (setq dired-guess-shell-gnutar "gtar")
              ;; (setq dired-x-hands-off-my-keys nil)
              ))

  (add-hook 'dired-mode-hook
            (lambda ()
              ;; Set dired-x buffer-local variables here.  For example:
              ;; (dired-omit-mode 1)
              ))
#+END_SRC

direx

#+BEGIN_SRC emacs-lisp
  (require 'direx)
  (global-set-key (kbd "C-x C-j") 'direx:jump-to-directory)
#+END_SRC

Allow dired to muck with the permissions.

#+BEGIN_SRC
  (setq wdired-allow-to-change-permissions t)
#+END_SRC

*** Writing
<<writing>>
#+BEGIN_SRC emacs-lisp
  (require 'synonymous)
  (require 'title-capitalization)
#+END_SRC

*** Info
<<info>>
#+BEGIN_SRC emacs-lisp
  (require 'info+)
#+END_SRC
*** Gnuplot
<<gnuplot>>
#+BEGIN_SRC emacs-lisp
  (require 'gnuplot)
#+END_SRC

*** HTTP
<<http>>
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Multiple-cursors
<<multi-cursor>>

#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+END_SRC

*** elfeed
<<elfeed>>

#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (global-set-key (kbd "C-x w") 'elfeed)
#+END_SRC

*** nginx
<<nginx>>

#+BEGIN_SRC emacs-lisp
  (require 'nginx-mode)
#+END_SRC

*** HackerNews
<<hn>>

#+BEGIN_SRC emacs-lisp
  (require 'hackernews)
#+END_SRC

*** Tramp
<<tramp>>

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
  (define-key global-map (kbd "C-c s") 'helm-tramp)
#+END_SRC

docker-tramp


#+BEGIN_SRC emacs-lisp
  (require 'docker-tramp)
#+END_SRC

*** Hugo
<<hugo>>

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ox
    (require 'ox-hugo))
#+END_SRC

*** org-bullets
<<bullets>>

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook 'org-bullets-mode)
#+END_SRC

** Emacs Shell Settings

Magit

#+BEGIN_SRC emacs-lisp
  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (magit-status default-directory)
    nil)
#+END_SRC

Clear buffer

#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    "Clear the eshell buffer"
    (interactive)
    (let ((eshell-buffer-maximum-lines 0))
      (eshell-truncate-buffer)))
#+END_SRC

** VT100 Escape Codes

# http://www8.cs.umu.se/~isak/snippets/vt100.txt
# http://stackoverflow.com/questions/23378271/how-do-i-display-ansi-color-codes-in-emacs-for-any-mode

#+BEGIN_SRC emacs-lisp
  (require 'ansi-color)

  (defun jc/display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max)))
#+END_SRC

** Org-mode Header UUIDs

[[https://writequit.org/articles/emacs-org-mode-generate-ids.html][UUID headline anchors]] from Lee, of course.

#+BEGIN_SRC emacs-lisp
  (require 'org-id)

  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  (defun jc/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.  If POM is
       nil, refer to the entry at point. If the entry does not have an CUSTOM_ID,
       the function returns nil. However, when CREATE is non nil, create a CUSTOM_ID
       if none is present already. PREFIX will be passed through to `jc/org-id-new'. In
       any case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (jc/org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" (substring id 0 10))
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun jc/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the current file which do not
       already have one. Only adds ids if the `auto-id' option is set to `t' in the
       file somewher, i.e., #+OPTIONS: auto-id:t"
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+OPTIONS:.*auto-id:t" (point-max) t)
        (org-map-entries (lambda () (jc/org-custom-id-get (point) 'create))))))

  (defun jc/org-id-new (&optional prefix)
    "Create a new globally unique ID.

  An ID consists of two parts separated by a dash-
  - a prefix
  - a unique part that will be created according to `org-id-method'.

  PREFIX can specify the prefix, the default is given by the variable
  `org-id-prefix'.  However, if PREFIX is the symbol `none', don't use any
  prefix even if `org-id-prefix' specifies one.

  So a typical ID could look like \"Org-4nd91V40HI\"."
    (let* ((prefix (if (eq prefix 'none)
                       ""
                     (concat (or prefix org-id-prefix) "-")))
           unique)
      (if (equal prefix "-") (setq prefix ""))
      (cond
       ((memq org-id-method '(uuidgen uuid))
        (setq unique (org-trim (shell-command-to-string org-id-uuid-program)))
        (unless (org-uuidgen-p unique)
          (setq unique (org-id-uuid))))
       ((eq org-id-method 'org)
        (let* ((etime (org-reverse-string (org-id-time-to-b36)))
               (postfix (if org-id-include-domain
                            (progn
                              (require 'message)
                              (concat "@" (message-make-fqdn))))))
          (setq unique (concat etime postfix))))
       (t (error "Invalid `org-id-method'")))
      (concat prefix unique)))
#+END_SRC

** Tangle Same src Block To Different Files

[[https://emacs.stackexchange.com/questions/39032/tangle-the-same-src-block-to-different-files][Thanks Tobias]]

#+BEGIN_SRC emacs-lisp
(defun jc/org-babel-tangle-collect-blocks (&optional language tangle-file)
  "Can be used as :override advice for `org-babel-tangle-collect-blocks'.
Handles lists of :tangle files."
  (let ((counter 0) last-heading-pos blocks)
    (org-babel-map-src-blocks (buffer-file-name)
      (let ((current-heading-pos
         (org-with-wide-buffer
          (org-with-limited-levels (outline-previous-heading)))))
    (if (eq last-heading-pos current-heading-pos) (cl-incf counter)
      (setq counter 1)
      (setq last-heading-pos current-heading-pos)))
      (unless (org-in-commented-heading-p)
    (let* ((info (org-babel-get-src-block-info 'light))
           (src-lang (nth 0 info))
           (src-tfiles (cdr (assq :tangle (nth 2 info))))) ; Tobias: accept list for :tangle
      (unless (consp src-tfiles) ; Tobias: unify handling of strings and lists for :tangle
        (setq src-tfiles (list src-tfiles))) ; Tobias: unify handling
      (dolist (src-tfile src-tfiles) ; Tobias: iterate over list
        (unless (or (string= src-tfile "no")
            (and tangle-file (not (equal tangle-file src-tfile)))
            (and language (not (string= language src-lang))))
          ;; Add the spec for this block to blocks under its
          ;; language.
          (let ((by-lang (assoc src-lang blocks))
            (block (org-babel-tangle-single-block counter)))
        (setcdr (assoc :tangle (nth 4 block)) src-tfile) ; Tobias:
        (if by-lang (setcdr by-lang (cons block (cdr by-lang)))
          (push (cons src-lang (list block)) blocks)))))))) ; Tobias: just ()
    ;; Ensure blocks are in the correct order.
    (mapcar (lambda (b) (cons (car b) (nreverse (cdr b)))) blocks)))

(defun jc/org-babel-tangle-single-block (oldfun block-counter &optional only-this-block)
  "Can be used as :around advice for `org-babel-tangle-single-block'.
If the :tangle header arg is a list of files. Handle all files"
  (let* ((info (org-babel-get-src-block-info))
     (params (nth 2 info))
     (tfiles (cdr (assoc :tangle params))))
    (if (null (and only-this-block (consp tfiles)))
    (funcall oldfun block-counter only-this-block)
      (cl-assert (listp tfiles) nil
         ":tangle only allows a tangle file name or a list of tangle file names")
      (let ((ret (mapcar
          (lambda (tfile)
            (let (old-get-info)
              (cl-letf* (((symbol-function 'old-get-info) (symbol-function 'org-babel-get-src-block-info))
                 ((symbol-function 'org-babel-get-src-block-info)
                  `(lambda (&rest get-info-args)
                     (let* ((info (apply 'old-get-info get-info-args))
                        (params (nth 2 info))
                        (tfile-cons (assoc :tangle params)))
                       (setcdr tfile-cons ,tfile)
                       info))))
            (funcall oldfun block-counter only-this-block))))
          tfiles)))
    (if only-this-block
        (list (cons (cl-caaar ret) (mapcar #'cadar ret)))
      ret)))))

(advice-add 'org-babel-tangle-collect-blocks :override #'jc/org-babel-tangle-collect-blocks)
(advice-add 'org-babel-tangle-single-block :around #'jc/org-babel-tangle-single-block)
#+END_SRC

#+RESULTS:

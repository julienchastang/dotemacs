#+TITLE:    Julien's emacs settings file
#+DATE: <2015-06-08 Tue>
#+AUTHOR:   Julien Chastang
#+EMAIL:    julien.c.chastang@gmail.com
#+LANGUAGE: en
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:nil p:nil pri:nil stat:t tags:t tasks:t tex:t timestamp:t toc:nil
#+OPTIONS: todo:t |:t
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+DESCRIPTION: Julien's literate emacs settings file
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:emacs org
#+LANGUAGE: en
#+SELECT_TAGS: export

* Literate Emacs Initialization File

#+BEGIN_EXAMPLE
     ____.     .__  .__            /\                                                 
    |    |__ __|  | |__| ____   ___)/  ______      ____   _____ _____    ____   ______
    |    |  |  \  | |  |/ __ \ /    \ /  ___/    _/ __ \ /     \\__  \ _/ ___\ /  ___/
/\__|    |  |  /  |_|  \  ___/|   |  \\___ \     \  ___/|  Y Y  \/ __ \\  \___ \___ \ 
\________|____/|____/__|\___  >___|  /____  >  /\ \___  >__|_|  (____  /\___  >____  >
                            \/     \/     \/   \/     \/      \/     \/     \/     \/ 
#+END_EXAMPLE

Emacs initialization as org file. It is a constant work in progress.

** Inspiration

- [[https://github.com/dakrone/dakrone-dotfiles/blob/master/emacs.org][Lee’s Emacs settings file]]
- [[https://github.com/vdemeester/emacs-config][Vincent Demeester’s emacs configuration]]

** Disclaimer

This disclaimer is in reference to the ultimate tangled file not this org
file. Sorry for the confusion.

#+BEGIN_SRC emacs-lisp
  ;; WARNING! This file is automatically generated from settings.org!
  ;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in your =~/.emacs.d/init.el= file.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; optionally remove default org install
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2013-09/msg00178.html

  (setq load-path
        (delq nil
              (mapcar
               (function (lambda (p)
                           (unless (string-match "lisp\\(/packages\\)?/org$" p)
                             p)))
               load-path)))

  (mapatoms (function
             (lambda (s)
               (let ((sn (symbol-name s)))
                 (when (string-match "^\\(org\\|ob\\|ox\\)\\(-.*\\)?$" sn)
                   (setplist s nil)
                   (when (eq 'autoload (car-safe s))
                     (unintern s)))))))

  ;; if curating org-mode, remember to 'make autoloads'

  (add-to-list 'load-path (expand-file-name "~/.emacs.d/git/org-mode/lisp"))

  (add-to-list 'load-path
               (expand-file-name "~/.emacs.d/git/org-mode/contrib/lisp"))

  ;; now tangle in settings.org

  (package-initialize)
  (require 'cl)
  (require 'ob-tangle)
  (org-babel-load-file "~/git/dotemacs/settings.org")
#+END_SRC

** General Settings 

Everything in this section are general settings that should not need any
non-default packages.

First let's change to a less horrible color theme. The available default options
are =adwaita deeper-blue dichromacy leuven light-blue manoj-dark misterioso tango
tango-dark tsdh-dark tsdh-light wheatgrass whiteboard wombat=

#+BEGIN_SRC emacs-lisp
  (condition-case nil
      (load-theme 'leuven)
      ('error (message (format "Could not load leuven theme"))))

  (custom-set-faces
   '(default ((t (:inherit nil :stipple nil :background "#F6F6EF"
                           :foreground "#333333" :inverse-video nil :box nil
                           :strike-through nil :overline nil :underline nil
                           :slant normal :weight normal :height 98 :width normal 
                           :foundry "monotype" :family "Andale Mono")))))
#+END_SRC

Deal with additional paths

#+begin_src emacs-lisp
  (defvar my-paths '("/usr/local/bin"))

  (dolist (pth my-paths)
    (when (file-directory-p pth)
      (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name pth)))
      (setq exec-path (split-string (getenv "PATH") path-separator))))
#+end_src


Increase auto-save rate.

#+begin_src emacs-lisp
  (setq auto-save-interval 20) ; twenty keystrokes
  (setq auto-save-timeout 10) ; ten idle seconds
#+end_src

Don't need a startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

UTF-8

#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Turn on syntax highlighting for all buffers

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

Turn off irrelevant stuff.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode  -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode  -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode 'nil))
  (mouse-wheel-mode t)
  (tooltip-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

Set up the fill-column to 80 characters and set tab width to 2.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (setq-default default-tab-width 2)
  ;; never use tab characters for indentation
  (setq-default indent-tabs-mode nil)
#+END_SRC

Function to join multiple lines.

#+BEGIN_SRC emacs-lisp
  (defun jc/join-lines ()
    (interactive)
    (let ((fill-column 999999))
      (fill-paragraph nil)))
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
  (setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
  (setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
  (whitespace-mode t)
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

rename file and buffer
 http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun jc/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC


Upcase & Down Case

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

Text scale bigger or smaller

#+BEGIN_SRC emacs-lisp
;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC

EWW

#+BEGIN_SRC emacs-lisp
  (setq eww-search-prefix "https://www.google.com/search?q=")
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

** Org mode Settings

At this point we still have not done anything special outside of what is
possible in a default emacs programming environment. This will continue for this
section.

Let's get the agenda going.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Clocking commands

#+BEGIN_SRC emacs-lisp
  (defun jc/org-query-clock-out ()
      "Ask the user before clocking out.
        This is a useful function for adding to `kill-emacs-query-functions'."
      (if (and (featurep 'org-clock)
               (funcall 'org-clocking-p)
               (y-or-n-p "You are currently clocking time, clock out? "))
          (org-clock-out)
        t)) ; only fails on keyboard quit or error

  (add-hook 'kill-emacs-query-functions 'jc/org-query-clock-out)
#+END_SRC

Ditaa is a command-line utility that converts diagrams drawn using ASCII art
into bitmap graphics. Here is the Ditta path:

#+BEGIN_SRC emacs-lisp
  ;; Brew path
  (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
#+END_SRC

Inline image support

#+BEGIN_SRC emacs-lisp
  (defun jc/do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))

  (global-set-key (kbd "C-c C-x C v")
                  'do-org-show-all-inline-images)

  (defun jc/fix-inline-images ()
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))

  (add-hook 'org-babel-after-execute-hook 'jc/fix-inline-images)
#+END_SRC

[[http://tex.stackexchange.com/questions/32348/problems-with-bbl-in-org-mode#comment594526_39885][bibtex]]

#+BEGIN_SRC emacs-lisp
  (require 'ox-bibtex)
  (setq org-latex-to-pdf-process (list "latexmk -pdf -bibtex %f"))
#+END_SRC

** Manually Curated Packages

These modes are not in any package manager so curate them manually.

#+tblname: private-packages
|-----------------------------+---------------+---------|
| package                     | description   | anchors |
|-----------------------------+---------------+---------|
| ~/.emacs.d/git/emacs-rotate | Buffer rotate | [[rotate]]  |
|-----------------------------+---------------+---------|

#+BEGIN_SRC emacs-lisp :var packs=private-packages :hlines no
  (defvar p-packages (mapcar 'car (cdr packs)))

  (dolist (pack p-packages)
    (when (file-directory-p  pack)
      (add-to-list 'load-path pack)))
#+END_SRC

** Package Archives
We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  ;; initalize all ELPA packages
  (require 'package)

  ;; define some package archives
  (add-to-list 'package-archives 
     '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))
  (add-to-list 'package-archives
    '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
  (package-refresh-contents)

  ;; keep customize settings in their own file
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Message how long it took to load everything (minus packages)
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages We Will Use

Define all the packages we are going to use. Note if you are viewing this table
on github, the anchors will not take you anywhere. The anchors only work in
emacs org mode.

#+tblname: my-packages
|-------------------------------+-----------------------------------------------+------------|
| package                       | description                                   | anchors    |
|-------------------------------+-----------------------------------------------+------------|
| helm                          | helm completion engine                        | [[helm]]       |
| projectile                    | Project navigation and management library     | [[projectile]] |
| helm-projectile               | Projectile helm integration                   | [[projectile]] |
| ace-jump-mode                 | ace-jump-mode                                 | [[ace]]        |
| rw-hunspell                   | spelling                                      | [[spelling]]   |
| rw-ispell                     | spelling                                      | [[spelling]]   |
| rw-language-and-country-codes | spelling                                      | [[spelling]]   |
| flycheck                      | on-the-fly syntax checking                    |            |
| yasnippet                     | Yet another snippet extension for Emacs       | [[yasnippet]]  |
| magit                         | emacs git client                              | [[git]]        |
| git-gutter                    | git gutter                                    | [[git]]        |
| git-timemachine               | Walk through git revisions of a file          | [[git]]        |
| fill-column-indicator         | 80 column rule                                | [[fci]]        |
| powerline                     | A better mode line                            | [[modeline]]   |
| paredit                       | structured editing of S-expression data       | [[paren]]      |
| rainbow-delimiters            | rainbow parentheses                           | [[paren]]      |
| markdown-mode                 | markdown for emacs                            | [[markdown]]   |
| yaml-mode                     | yaml for emacs                                | [[yaml]]       |
| undo-tree                     | undo tree                                     | [[undo]]       |
| windresize                    | arrow keys resize the window                  |            |
| clojure-mode                  | Mode for clojure                              | [[clojure]]    |
| cider                         | Clojure IDE and REPL for Emacs                | [[clojure]]    |
| clojure-snippets              | Yasnippets for clojure                        | [[clojure]]    |
| clj-refactor                  | A collection of clojure refactoring functions | [[clojure]]    |
| javap-mode                    | Load .class file and get javap output         |            |
| sx                            | Stack Exchange for Emacs                      | [[sx]]         |
| python                        | Python mode for emacs                         | [[python]]     |
| dockerfile-mode               | Major mode for editing Docker's Dockerfiles   |            |
|-------------------------------+-----------------------------------------------+------------|

#+tblname: my-packages-unstable
|-------------+--------------------------------------+-------------|
| package     | description                          | anchors     |
|-------------+--------------------------------------+-------------|
| org-present | Minimal presentation mode for emacs  | [[org-present]] |
| emms        | The Emacs Multimedia System          | [[emms]]        |
| restclient  | An interactive HTTP client for Emacs | [[restclient]]  |
|-------------+--------------------------------------+-------------|

Download the packages we need.

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
  (defvar install-packages (mapcar 'intern (mapcar 'car (cdr packs))))

  (dolist (pack install-packages)
     (unless (package-installed-p pack)
       (package-install pack)))
#+END_SRC

Now handle unstable packages.

#+BEGIN_SRC emacs-lisp :var packs=my-packages-unstable :hlines no
  (defvar install-packages-unstable (mapcar 'intern (mapcar 'car (cdr packs))))

  (add-to-list 'package-archives 
     '("melpa-unstable" . "http://melpa.milkbox.net/packages/"))
  (package-refresh-contents)

  (dolist (pack install-packages-unstable)
     (unless (package-installed-p pack)
       (package-install pack)))
#+END_SRC

** Package Configuration
*** Helm
<<helm>>

#+BEGIN_SRC emacs-lisp
  (require 'helm-config)
  (require 'helm)
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files) 
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
 
  (setq helm-mode-fuzzy-match t) 
  (setq helm-completion-in-region-fuzzy-match t) 
  (setq helm-candidate-number-limit 75) 
#+END_SRC

*** Projectile
<<projectile>>

#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'helm)
#+END_SRC

*** Ace Jump Mode
<<ace>>

#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "\C-c SPC") 'ace-jump-mode)))
#+END_SRC

*** Spelling 
<<spelling>>

Using hunspell and friends. If on OS X make sure you have dictionaries in
=/Library/Spelling= and/or =~/Library/Spelling= or else you'll get a mysterious
error. For English language dictionaries, it should be something like
=default.aff default.dic en_US.aff n_US.dic=. The =default= files are
soft-linked to the main dictionary of your choice (in this case =en_US=). Also
make sure to =brew install hunspell=.

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "/usr/local/bin/hunspell")
      (progn
        ;; Add english-hunspell as a dictionary
        (setq-default ispell-program-name "hunspell"))
    (progn (setq-default ispell-program-name "aspell")
           (setq ispell-extra-args '("--sug-mode=normal" "--ignore=3"))))

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN" . "#\\+END"))
#+END_SRC

*** YASnippet
<<yasnippet>>

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

*** git
<<git>>

git gutter

#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode t)
#+END_SRC

Magit stuff

#+BEGIN_SRC emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

*** Fill Column Indicator
<<fci>>

#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'fci-mode)
  (add-hook 'org-mode-hook 'fci-mode)
#+END_SRC

https://github.com/alpaker/Fill-Column-Indicator/issues/45

#+BEGIN_SRC emacs-lisp
  (defun fci-mode-override-advice (&rest args))

  (advice-add 'org-html-fontify-code :around
              (lambda (fun &rest args)
                (advice-add 'fci-mode :override #'fci-mode-override-advice)
                (let ((result  (apply fun args)))
                  (advice-remove 'fci-mode #'fci-mode-override-advice)
                  result)))
#+END_SRC

*** Mode line
<<modeline>>

#+BEGIN_SRC emacs-lisp
  (powerline-default-theme)
#+END_SRC

*** Parentheses
<<paren>>

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
#+END_SRC

#+END_SRC

*** Undo
<<undo>>

#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC

*** Clojure
<<clojure>>

All the configuration crap recommended by https://github.com/clojure-emacs/cider

#+BEGIN_SRC emacs-lisp

  (add-hook 'clojure-mode-hook 'paredit-mode)

  (add-hook 'cider-mode-hook #'eldoc-mode)

  (add-hook 'cider-repl-mode-hook #'subword-mode)

  (add-hook 'cider-repl-mode-hook #'paredit-mode)

  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)

  (setq nrepl-log-messages t)

  (setq nrepl-hide-special-buffers t)

  (add-hook 'clojure-mode-hook 'prettify-symbols-mode)

  (add-hook 'cider-repl-mode-hook 'prettify-symbols-mode)

  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC


[[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Org-babel-clojure]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/git/org-mode/lisp")

  (require 'org)
  (require 'ob-clojure)

  (setq org-babel-clojure-backend 'cider)
  (require 'cider)
#+END_SRC

*** Markdown
<<markdown>>

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)

  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

git flavored markdown

(require 'ox-gfm)

*** YAML
<<yaml>>

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
      (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

  (add-hook 'yaml-mode-hook
        '(lambda ()
          (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

*** EMMS
<<emms>>

#+BEGIN_SRC emacs-lisp
  (require 'emms-setup)
  (emms-standard)
  (emms-default-players)         
#+END_SRC

*** Stack Exchange
<<sx>>

#+BEGIN_SRC emacs-lisp
  (require 'sx-load) 
#+END_SRC
    
*** Jython/Python
<<python>>

This base settings.org emacs initialization file has somewhat limited support
for Python. The 'python' branch of this repository has much better support
coupled with [[https://github.com/julienchastang/Julien-Dockerfiles/tree/master/python-emacs][this emacs docker machine]]. Using Jython for babel (which yields
somewhat mixed results).

jython/python mode

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "jython")
#+END_SRC

Fill column indicator

#+BEGIN_SRC emacs-lisp
  ;; fill column indicator for python files
  (add-hook 'python-mode-hook 'fci-mode)
#+END_SRC

*** org-present
<<org-present>>

org-present

#+BEGIN_SRC emacs-lisp
  (require 'org-present)
#+END_SRC

*** Rotate
<<rotate>>

Buffer Rotation

#+BEGIN_SRC emacs-lisp
  (require 'rotate)
  (global-set-key (kbd "C-x C-o") 'rotate-window)
#+END_SRC

*** Babel
<<babel>>
Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (emacs-lisp . t)
     (org . t)
     (shell . t)
     (clojure . t)
     (python . t)))
#+END_SRC

[[http://kitchingroup.cheme.cmu.edu/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode/][Language specific default headers for code blocks in org-mode]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("sp"
                 "#+BEGIN_SRC python\n?\n#+END_SRC"
                 "<src lang=\"python\">\n?\n</src>"))

  (add-to-list 'org-structure-template-alist
               '("sc"
                 "#+BEGIN_SRC clojure\n?\n#+END_SRC"
                 "<src lang=\"clojure\">\n?\n</src>"))

  (add-to-list 'org-structure-template-alist
               '("se"
                 "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"
                 "<src lang=\"emacs-lisp\">\n?\n</src>"))
#+END_SRC

*** XML
<<xml>>

#+BEGIN_SRC emacs-lisp
  (require 'hideshow)
  (require 'sgml-mode)
  (require 'nxml-mode)

  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"

                 "<!--"
                 sgml-skip-tag-forward
                 nil))



  (add-hook 'nxml-mode-hook 'hs-minor-mode)

  ;; optional key bindings, easier than hs defaults
  (define-key nxml-mode-map (kbd "C-c h") 'hs-toggle-hiding)
#+END_SRC

*** emacs-lisp

eldoc for emacs lisp development

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

*** restclient
<<restclient>>

#+BEGIN_SRC emacs-lisp
  (require 'restclient)
#+END_SRC

** Emacs Shell Settings

Magit

#+BEGIN_SRC emacs-lisp
  (defun eshell/magit ()
    "Function to open magit-status for the current directory"
    (interactive)
    (magit-status default-directory)
    nil)
#+END_SRC

Clear buffer

#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    "Clear the eshell buffer"
    (interactive)
    (let ((eshell-buffer-maximum-lines 0))
      (eshell-truncate-buffer)))
#+END_SRC


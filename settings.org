#+TITLE:    Julien's emacs settings file
#+AUTHOR:   Julien Chastang
#+EMAIL:    julien.c.chastang@gmail.com
#+LANGUAGE: en

* Literate Emacs Initialization File

Emacs initialization as org file.

** Disclaimer

#+BEGIN_SRC emacs-lisp
;; WARNING! This file is automatically generated from settings.org!
;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in your ~/.emacs.d/init.el file.

#+BEGIN_SRC
(package-initialize)
(require 'cl)
(require 'ob-tangle)
(org-babel-load-file "~/git/emacs-config/settings.org")
#+END_SRC

** General Settings 

Everything in this section are general settings that should not need any
non-default packages.

First let's change to a less horrible color theme. The available default options
are adwaita 	deeper-blue 	dichromacy 	leuven 	light-blue 	manoj-dark
misterioso 	tango 	tango-dark 	tsdh-dark 	tsdh-light 	wheatgrass
whiteboard 	wombat

#+BEGIN_SRC emacs-lisp
(load-theme 'leuven)

(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :background "#F6F6EF" :foreground "#333333" 
                :inverse-video nil :box nil :strike-through nil :overline nil 
                :underline nil :slant normal :weight normal :height 98 :width normal 
                :foundry "monotype" :family "Andale Mono")))))
#+END_SRC

Increase auto-save rate.

#+begin_src emacs-lisp
(setq auto-save-interval 20) ; twenty keystrokes
(setq auto-save-timeout 10) ; ten idle seconds
#+end_src

Don't need a startup message.

#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

UTF-8

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Turn on syntax highlighting for all buffers

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

Turn off irrelevant stuff.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (window-system)
  (set-scroll-bar-mode 'nil)
  (mouse-wheel-mode t))
(tool-bar-mode -1)
(tooltip-mode -1)
(blink-cursor-mode -1)
#+END_SRC

Set up the fill-column to 80 characters and set tab width to 2.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
(setq-default default-tab-width 2)
;; never use tab characters for indentation
(setq-default indent-tabs-mode nil)
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
(setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
(setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
(whitespace-mode t)
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

rename file and buffer
 http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
(defun jc/rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+END_SRC

Interactively Do Things

#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

Upcase & Down Case

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC

** Org mode Settings

At this point we still have not done anything special outside of what is
possible in a default emacs programming environment. This will continue for this
section.

Let's get the agenda going.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Clocking commands

#+BEGIN_SRC emacs-lisp
(defun jc/org-query-clock-out ()
      "Ask the user before clocking out.
    This is a useful function for adding to `kill-emacs-query-functions'."
      (if (and (featurep 'org-clock)
               (funcall 'org-clocking-p)
               (y-or-n-p "You are currently clocking time, clock out? "))
          (org-clock-out)
        t)) ; only fails on keyboard quit or error

(add-hook 'kill-emacs-query-functions 'jc/org-query-clock-out)
#+END_SRC

Ditaa is a command-line utility that converts diagrams drawn using ASCII art
into bitmap graphics. Here is the Ditta path:

#+BEGIN_SRC emacs-lisp
;; Brew path
(setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
#+END_SRC

Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
  '((ditaa . t)
     (python . t)
     (emacs-lisp . t)))
#+END_SRC


** Package Archives
We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
;; Keep track of loading time
(defconst emacs-start-time (current-time))

;; initalize all ELPA packages
(require 'package)

;; define some package archives
(add-to-list 'package-archives 
   '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives
  '("marmalade" . "http://marmalade-repo.org/packages/"))
(package-initialize)
(package-refresh-contents)

;; keep customize settings in their own file
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))

;; Message how long it took to load everything (minus packages)
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages We Will Use

Define all the packages we are going to use. Note if you are viewing this table
on github, the anchors will not take you anywhere. The anchors only work in
emacs org mode.

#+tblname: my-packages
|-----------------------+--------------------------------------------+----------|
| package               | description                                | anchors  |
|-----------------------+--------------------------------------------+----------|
| magit                 | emacs git client                           | [[git]]      |
| git-gutter            | git gutter                                 | [[git]]      |
| fill-column-indicator | 80 column rule                             | [[fci]]      |
| powerline             | A better mode line                         | [[modeline]] |
| smartparens           | Smart paren pairs                          | [[paren]]    |
| rainbow-delimiters    | rainbow parentheses                        | [[paren]]    |
| smex                  | recently and most frequently used commands | [[smex]]     |
| markdown-mode         | markdown for emacs                         | [[markdown]] |
| undo-tree             | undo tree                                  | [[undo]]     |
| auto-complete         | auto-completion extension for Emac         | [[autoc]]    |
| windresize            | arrow keys resize the window               |          |
| clojure-mode          | Mode for clojure                           | [[clojure]]  |
| cider                 | Clojure IDE and REPL for Emacs             | [[clojure]]  |
| kibit-mode            | Static code analyzer for Clojure           | [[clojure]]  |
| ac-nrepl              | nrepl completion source for Emacs          | [[clojure]]  |
| javap-mode            | Load .class file and get javap output      |          |
| python-mode           | Python mode for emacs                      | [[python]]   |
| ein                   | Emacs IPython Notebook                     | [[python]]   |
| jedi                  | Python auto-completion for Emacs           | [[python]]   |
|-----------------------+--------------------------------------------+----------|

Download the packages we need.

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
(defvar install-packages (mapcar 'intern (mapcar 'car (cdr packs))))

(dolist (pack install-packages)
   (unless (package-installed-p pack)
     (package-install pack)))
#+END_SRC

** Package Configuration
*** git
#+NAME: git

#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode t)
#+END_SRC

*** Fill Column Indicator
#+NAME: fci

#+BEGIN_SRC emacs-lisp
nil
#+END_SRC

*** Mode line
#+NAME: modeline

#+BEGIN_SRC emacs-lisp
(powerline-default-theme)
(set-face-background 'mode-line "#FF8700")
(set-face-foreground 'mode-line "#870000")
 
(set-face-background 'powerline-active1 "#373b41")
(set-face-foreground 'powerline-active1 "#dcdcdc")
 
(set-face-background 'powerline-active2 "#282a2e")
(set-face-foreground 'powerline-active2 "#dcdcdc")

(powerline-reset)
#+END_SRC

*** Parentheses
#+NAME: paren

**** Smartparens
    
#+BEGIN_SRC emacs-lisp
;;;;;;;;;
;; global
(smartparens-global-mode t)

;; highlights matching pairs
(show-smartparens-global-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;
;; keybinding management

(define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
(define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

(define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
(define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
(define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
(define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

(define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
(define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
(define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
(define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

(define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
(define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

(define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
(define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp)

(define-key sp-keymap (kbd "M-<delete>") 'sp-unwrap-sexp)
(define-key sp-keymap (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

(define-key sp-keymap (kbd "C-<right>") 'sp-forward-slurp-sexp)
(define-key sp-keymap (kbd "C-<left>") 'sp-forward-barf-sexp)
(define-key sp-keymap (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
(define-key sp-keymap (kbd "C-M-<right>") 'sp-backward-barf-sexp)

(define-key sp-keymap (kbd "M-D") 'sp-splice-sexp)
(define-key sp-keymap (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
(define-key sp-keymap (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
(define-key sp-keymap (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

(define-key sp-keymap (kbd "C-]") 'sp-select-next-thing-exchange)
(define-key sp-keymap (kbd "C-<left_bracket>") 'sp-select-previous-thing)
(define-key sp-keymap (kbd "C-M-]") 'sp-select-next-thing)

(define-key sp-keymap (kbd "M-F") 'sp-forward-symbol)
(define-key sp-keymap (kbd "M-B") 'sp-backward-symbol)

(define-key sp-keymap (kbd "H-t") 'sp-prefix-tag-object)
(define-key sp-keymap (kbd "H-p") 'sp-prefix-pair-object)
(define-key sp-keymap (kbd "H-s c") 'sp-convolute-sexp)
(define-key sp-keymap (kbd "H-s a") 'sp-absorb-sexp)
(define-key sp-keymap (kbd "H-s e") 'sp-emit-sexp)
(define-key sp-keymap (kbd "H-s p") 'sp-add-to-previous-sexp)
(define-key sp-keymap (kbd "H-s n") 'sp-add-to-next-sexp)
(define-key sp-keymap (kbd "H-s j") 'sp-join-sexp)
(define-key sp-keymap (kbd "H-s s") 'sp-split-sexp)

;;;;;;;;;;;;;;;;;;
;; pair management

(sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

;;; markdown-mode
(sp-with-modes '(markdown-mode gfm-mode rst-mode)
  (sp-local-pair "*" "*" :bind "C-*")
  (sp-local-tag "2" "**" "**")
  (sp-local-tag "s" "```scheme" "```")
  (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-mafltch-sgml-tags))

;;; tex-mode latex-mode
(sp-with-modes '(tex-mode plain-tex-mode latex-mode)
  (sp-local-tag "i" "\"<" "\">"))

;;; html-mode
(sp-with-modes '(html-mode sgml-mode)
  (sp-local-pair "<" ">"))

;;; lisp modes
(sp-with-modes sp--lisp-modes
  (sp-local-pair "(" nil :bind "C-("))
#+END_SRC
**** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

*** Smex
#+NAME: smex
    
#+BEGIN_SRC emacs-lisp
(smex-initialize) 
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Undo
#+NAME: undo


#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC
    
*** Auto-Complete
#+NAME: autoc

#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC

*** Clojure
#+NAME: clojure

#+BEGIN_SRC emacs-lisp
(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

(add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
(add-hook 'cider-mode-hook 'ac-nrepl-setup)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'cider-repl-mode))

(eval-after-load "cider"
  '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc))
#+END_SRC

*** Python
#+NAME: python


#+BEGIN_SRC emacs-lisp
;; autocomplete with Jedi
(add-hook 'python-mode-hook 'jedi:setup)
(add-hook 'ein:connect-mode-hook 'ein:jedi-setup)

;; fill column indicator for python files
(add-hook 'python-mode-hook 'fci-mode)
#+END_SRC

*** Markdown
#+NAME: markdown

#+BEGIN_SRC emacs-lisp

(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)

(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

#+TITLE:    Julien's emacs settings file
#+DATE: <2015-04-28 Tue>
#+AUTHOR:   Julien Chastang
#+EMAIL:    julien.c.chastang@gmail.com
#+LANGUAGE: en
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+DESCRIPTION: Julien's literate emacs settings file
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:emacs org
#+LANGUAGE: en
#+SELECT_TAGS: export

#+BEGIN_EXAMPLE
     ____.     .__  .__            /\                                                 
    |    |__ __|  | |__| ____   ___)/  ______      ____   _____ _____    ____   ______
    |    |  |  \  | |  |/ __ \ /    \ /  ___/    _/ __ \ /     \\__  \ _/ ___\ /  ___/
/\__|    |  |  /  |_|  \  ___/|   |  \\___ \     \  ___/|  Y Y  \/ __ \\  \___ \___ \ 
\________|____/|____/__|\___  >___|  /____  >  /\ \___  >__|_|  (____  /\___  >____  >
                            \/     \/     \/   \/     \/      \/     \/     \/     \/ 
#+END_EXAMPLE

* Literate Emacs Initialization File

Emacs initialization as org file. It is a constant work in progress.

** Inspiration

- [[https://github.com/vdemeester/emacs-config][Vincent Demeester’s emacs configuration]]
- [[https://github.com/dakrone/dakrone-dotfiles/blob/master/.emacs.d/settings.org][Lee’s Emacs settings file]]

** Disclaimer

#+BEGIN_SRC emacs-lisp
  ;; WARNING! This file is automatically generated from settings.org!
  ;; ANY CHANGES MADE IN THIS FILE (settings.el) WILL BE OVERWRITTEN
#+END_SRC

** Preamble

In order to have this file be the emacs initialization file, put the following
snippet in your ~/.emacs.d/init.el file.

#+BEGIN_SRC
(package-initialize)
(require 'cl)
(require 'ob-tangle)
(org-babel-load-file "~/git/dotemacs/settings.org")
#+END_SRC

** General Settings 

Everything in this section are general settings that should not need any
non-default packages.

First let's change to a less horrible color theme. The available default options
are adwaita deeper-blue dichromacy leuven light-blue manoj-dark misterioso tango
tango-dark tsdh-dark tsdh-light wheatgrass whiteboard wombat

#+BEGIN_SRC emacs-lisp
  (condition-case nil
      (load-theme 'leuven)
      ('error (message (format "Could not load leuven theme"))))

  (custom-set-faces
   '(default ((t (:inherit nil :stipple nil :background "#F6F6EF"
                           :foreground "#333333" :inverse-video nil :box nil
                           :strike-through nil :overline nil :underline nil
                           :slant normal :weight normal :height 98 :width normal 
                           :foundry "monotype" :family "Andale Mono")))))
#+END_SRC

Deal with additional paths

#+begin_src emacs-lisp
  (defvar my-paths '("/usr/local/bin"))

  (dolist (pth my-paths)
    (when (file-directory-p pth)
      (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name pth)))
      (setq exec-path (split-string (getenv "PATH") path-separator))))
#+end_src


Increase auto-save rate.

#+begin_src emacs-lisp
  (setq auto-save-interval 20) ; twenty keystrokes
  (setq auto-save-timeout 10) ; ten idle seconds
#+end_src

Don't need a startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

UTF-8

#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
#+END_SRC

y or n instead of yes or no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Turn on syntax highlighting for all buffers

#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

Turn off irrelevant stuff.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode  -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode  -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode 'nil))
  (mouse-wheel-mode t)
  (tooltip-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

Set up the fill-column to 80 characters and set tab width to 2.

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (setq-default default-tab-width 2)
  ;; never use tab characters for indentation
  (setq-default indent-tabs-mode nil)
#+END_SRC

Hide the mouse while typing.

#+BEGIN_SRC emacs-lisp
  (setq make-pointer-invisible t)
#+END_SRC

It's okay to refer to a file by a symlink.

#+BEGIN_SRC emacs-lisp
  (setq-default find-file-visit-truename nil)
#+END_SRC

Require a newline at the end of files.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Always turn on whitespace mode

#+BEGIN_SRC emacs-lisp
  (whitespace-mode t)
#+END_SRC

Parentheses.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Auto revert buffer.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

rename file and buffer
 http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/

#+BEGIN_SRC emacs-lisp
  (defun jc/rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))
#+END_SRC

Interactively Do Things

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
#+END_SRC

Upcase & Down Case

#+BEGIN_SRC emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC

EWW

#+BEGIN_SRC emacs-lisp
  (setq eww-search-prefix "https://www.google.com/search?q=")
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

Buffer Rotation

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-o") 'rotate-window)
#+END_SRC

** Org mode Settings

At this point we still have not done anything special outside of what is
possible in a default emacs programming environment. This will continue for this
section.

Let's get the agenda going.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Code blocks should be have syntax highlighting

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

Clocking commands

#+BEGIN_SRC emacs-lisp
  (defun jc/org-query-clock-out ()
      "Ask the user before clocking out.
        This is a useful function for adding to `kill-emacs-query-functions'."
      (if (and (featurep 'org-clock)
               (funcall 'org-clocking-p)
               (y-or-n-p "You are currently clocking time, clock out? "))
          (org-clock-out)
        t)) ; only fails on keyboard quit or error

  (add-hook 'kill-emacs-query-functions 'jc/org-query-clock-out)
#+END_SRC

Ditaa is a command-line utility that converts diagrams drawn using ASCII art
into bitmap graphics. Here is the Ditta path:

#+BEGIN_SRC emacs-lisp
  ;; Brew path
  (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.9/libexec/ditaa0_9.jar")
#+END_SRC

Loading babel supported languages:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t)
     (emacs-lisp . t)))
#+END_SRC

Inline image support

#+BEGIN_SRC emacs-lisp
  (defun jc/do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))

  (global-set-key (kbd "C-c C-x C v")
                  'do-org-show-all-inline-images)
#+END_SRC

** Package Archives
We have a decent emacs configuration at this point. Now start loading external
utilities.

First define the package archives and where they live.

#+BEGIN_SRC emacs-lisp
  ;; Keep track of loading time
  (defconst emacs-start-time (current-time))

  ;; initalize all ELPA packages
  (require 'package)

  ;; define some package archives
  (add-to-list 'package-archives 
     '("melpa" . "http://melpa.milkbox.net/packages/"))
  (add-to-list 'package-archives
    '("marmalade" . "http://marmalade-repo.org/packages/"))
  (package-initialize)
  (package-refresh-contents)

  ;; keep customize settings in their own file
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file)
    (load custom-file))

  ;; Message how long it took to load everything (minus packages)
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading settings...done (%.3fs)" elapsed))
#+END_SRC

** Packages We Will Use

Define all the packages we are going to use. Note if you are viewing this table
on github, the anchors will not take you anywhere. The anchors only work in
emacs org mode.

#+tblname: my-packages
|-------------------------------+-----------------------------------------------+-----------|
| package                       | description                                   | anchors   |
|-------------------------------+-----------------------------------------------+-----------|
| rw-hunspell                   | spelling                                      | [[spelling]]  |
| rw-ispell                     | spelling                                      | [[spelling]]  |
| rw-language-and-country-codes | spelling                                      | [[spelling]]  |
| flycheck                      | on-the-fly syntax checking                    |           |
| yasnippet                     | Yet another snippet extension for Emacs       | [[yasnippet]] |
| magit                         | emacs git client                              | [[git]]       |
| git-gutter                    | git gutter                                    | [[git]]       |
| git-timemachine               | Walk through git revisions of a file          | [[git]]       |
| fill-column-indicator         | 80 column rule                                | [[fci]]       |
| powerline                     | A better mode line                            | [[modeline]]  |
| rotate                        | Buffer rotate                                 | [[rotate]]    |
| paredit                       | structured editing of S-expression data       | [[paren]]     |
| rainbow-delimiters            | rainbow parentheses                           | [[paren]]     |
| smex                          | recently and most frequently used commands    | [[smex]]      |
| markdown-mode                 | markdown for emacs                            | [[markdown]]  |
| undo-tree                     | undo tree                                     | [[undo]]      |
| auto-complete                 | Auto Completion for GNU Emacs                 | [[autoc]]     |
| windresize                    | arrow keys resize the window                  |           |
| clojure-mode                  | Mode for clojure                              | [[clojure]]   |
| cider                         | Clojure IDE and REPL for Emacs                | [[clojure]]   |
| kibit-mode                    | Static code analyzer for Clojure              | [[clojure]]   |
| clojure-snippets              | Yasnippets for clojure                        | [[clojure]]   |
| clj-refactor                  | A collection of clojure refactoring functions | [[clojure]]   |
| javap-mode                    | Load .class file and get javap output         |           |
| hackernews                    | Access the hackernews aggregator from Emacs   | [[hn]]        |
| sx                            | Stack Exchange for Emacs                      | [[sx]]        |
| org-present                   | Minimal presentation mode for emacs           |           |
| python-mode                   | Python mode for emacs                         | [[python]]    |
|-------------------------------+-----------------------------------------------+-----------|

Download the packages we need.

#+BEGIN_SRC emacs-lisp :var packs=my-packages :hlines no
  (defvar install-packages (mapcar 'intern (mapcar 'car (cdr packs))))

  (dolist (pack install-packages)
     (unless (package-installed-p pack)
       (package-install pack)))
#+END_SRC

** Package Configuration
*** Spelling
#+NAME: spelling

Using hunspell and friends. If on OS X make sure you have dictionaries in
=/Library/Spelling= and/or =~/Library/Spelling= or else you'll get a mysterious
error. For English language dictionaries, it should be something like
=default.aff default.dic en_US.aff n_US.dic=. The =default= files are
soft-linked to the main dictionary of your choice (in this case =en_US=). Also
make sure to =brew install hunspell=.

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "/usr/local/bin/hunspell")
      (progn
        ;; Add english-hunspell as a dictionary
        (setq-default ispell-program-name "hunspell"))
    (progn (setq-default ispell-program-name "aspell")
           (setq ispell-extra-args '("--sug-mode=normal" "--ignore=3"))))

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN" . "#\\+END"))
#+END_SRC

*** YASnippet
#+NAME: yasnippet

#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC

*** git
#+NAME: git

#+BEGIN_SRC emacs-lisp
  (global-git-gutter-mode t)
#+END_SRC

*** Fill Column Indicator
#+NAME: fci

#+BEGIN_SRC emacs-lisp
  (add-hook 'clojure-mode-hook 'fci-mode)
  (add-hook 'org-mode-hook 'fci-mode)
#+END_SRC

*** Mode line
#+NAME: modeline

#+BEGIN_SRC emacs-lisp
  (powerline-default-theme)
#+END_SRC

*** Parentheses
#+NAME: paren

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'ielm-mode-hook 'enable-paredit-mode)
#+END_SRC

*** Smex
#+NAME: smex
    
#+BEGIN_SRC emacs-lisp
  (smex-initialize) 
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC

*** Undo
#+NAME: undo

#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode)
#+END_SRC
    
*** Auto-Complete w/ Company
#+NAME: autoc

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

*** Clojure
#+NAME: clojure

All the configuration crap recommended by https://github.com/clojure-emacs/cider

#+BEGIN_SRC emacs-lisp

  (add-hook 'clojure-mode-hook 'paredit-mode)

  (add-hook 'cider-mode-hook #'eldoc-mode)

  (add-hook 'cider-repl-mode-hook #'company-mode)

  (add-hook 'cider-mode-hook #'company-mode)

  (add-hook 'cider-repl-mode-hook #'subword-mode)

  (add-hook 'cider-repl-mode-hook #'paredit-mode)

  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)

  (setq nrepl-log-messages t)

  (setq nrepl-hide-special-buffers t)

  (add-hook 'clojure-mode-hook 'prettify-symbols-mode)

  (add-hook 'cider-repl-mode-hook 'prettify-symbols-mode)

  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)
                                 (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC


[[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Org-babel-clojure]]

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/git/org-mode/lisp")

  (require 'org)
  (require 'ob-clojure)

  (setq org-babel-clojure-backend 'cider)
  (require 'cider)
#+END_SRC

*** Markdown
#+NAME: markdown

#+BEGIN_SRC emacs-lisp
  (autoload 'markdown-mode "markdown-mode"
     "Major mode for editing Markdown files" t)

  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

*** Hacker News
#+NAME: hn

#+BEGIN_SRC emacs-lisp
  (require 'hackernews)

  (custom-set-faces 
   '(hackernews-link-face ((t (:foreground "dark orange")))))
   
#+END_SRC

*** Stack Exchange

#+NAME: sx

#+BEGIN_SRC emacs-lisp
  (require 'sx-load) 
#+END_SRC
    
*** Jython/Python
#+NAME: python

jython/python mode

#+BEGIN_SRC emacs-lisp
  ;; Need to find and install python-mode
  (let* ((d "~/.emacs.d/elpa/")
         (p (concat d
                    (car
                     (remove-if-not (lambda (x)
                                      (string-match-p "python-mode" x))
                                    (directory-files d ))))))
    (setq py-install-directory p)
    (add-to-list 'load-path py-install-directory))

  (require 'python-mode)
#+END_SRC

Fill column indicator

#+BEGIN_SRC emacs-lisp
  ;; fill column indicator for python files
  (add-hook 'python-mode-hook 'fci-mode)
#+END_SRC


